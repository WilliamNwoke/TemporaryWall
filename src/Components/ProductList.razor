@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<div class="card-columns">
<!--Generates individual cards for each product-->
@foreach (var product in ProductService.GetAllData())
{   
    @if (product.Title == null  || product.Title == "Enter Title")
    {
        continue;
    }
     else
    {
        <div class="card">
            <!--Display product image-->
            <div class="card-img" style="background-image: url('@product.Image');"></div>

            <!--displays product title on card-->
            <div class="card-body">
                <h5 class="card-title">@product.Title</h5>
            </div>

            <div class="card-footer">
                <!--More Info button-->
                <small class="text-muted">
                    <button @onclick="(e => SelectProduct(product.Id))"
                            data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                        More Info
                    </button>
                </small>
            </div>
        </div>
    }          
}
</div>

@if(selectedProduct != null)
{
  <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5> <!--Display product title-->
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <!--Close button-->
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="card">
                    <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        <!--Display product image-->
                    </div>
                    <div class="card-body">
                        <p class="card-text">@selectedProduct.Description</p> <!--Display product description-->
                    </div>
                </div>
            </div>

            <!--Shows vote count-->
            <div class="modal-footer">
                @if (voteCount == 0)
                {
                    <span>Be the first to vote!</span> }
                else
                {
                    <span>@voteCount @voteLabel</span>}
                @for (int i = 1; i < 6; i++)
                {
                    var currentStar = i;
                    if (i <= currentRating)
                    {
                        <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span> }
                    else
                    {
                        <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>}
                }
            </div>
        </div>
    </div>
  </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code 
{
    ProductModel selectedProduct;
    string selectedProductId;

    // Retrieves specific product information
    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    // Retrieves Current ratings
    void GetCurrentRating()
    {
        //Checks if there are ratings
        if (selectedProduct.Ratings == null) // product with no ratings
        {
            currentRating = 0;
            voteCount = 0;
        }
        else // product with ratings
        {
            voteCount = selectedProduct.Ratings.Count(); //retrieves number of votes
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount; //calculates average of all votes
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    // Function to submit ratings
    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating); // Adds rating to JSON database
        SelectProduct(selectedProductId);
    }
}
